The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

This is an test text file. These are the possible test cases:

    ##### Importing the function from the module #####
    >>> say_my_name = __import__('3-say_my_name').say_my_name

    ##### Check that the file is executable #####
    >>> import os
    >>> os.access("3-say_my_name.py", os.X_OK)
    True

    ##### Check for the documentation of the module #####
    >>> len(__import__("3-say_my_name").__doc__) > 1
    True

    ##### Check for the documentation of the function #####
    >>> len(__import__("3-say_my_name").say_my_name.__doc__) > 1
    True

    ##### Check for pep8 style #####
    >>> os.popen("pep8 3-say_my_name.py").read()
    ''

    ##### Check for a newline at the end of the file #####
    >>> os.popen("cat -e 3-say_my_name.py | tail -1").read()[-1]
    '\n'

    ##### Check for the file has a shebang #####
    >>> os.popen("cat 3-say_my_name.py | head -1").read()
    '#!/usr/bin/python3\n'

    ##### Check that the README file exists #####
    >>> cwd = os.getcwd()
    >>> check_readme = cwd + '/README.md'
    >>> os.path.exists(check_readme)
    True

    ##### Check when first name is a number #####
    >>> say_my_name(12, "cortes")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### Check when is passed a integer as argument #####
    >>> say_my_name(12)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### Check when the last name is a number #####
    >>> say_my_name("Daniel", 26)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    ##### Check when the value pass are strings #####
    >>> say_my_name("Daniel", "Cortes")
    My name is Daniel Cortes

    ##### Check when is given a firs name #####
    >>> say_my_name("Daniel")
    My name is Daniel 

    ##### Check when first name is empty and is given a last name #####
    >>> say_my_name("", "Cortes")
    My name is  Cortes

    ##### Check when first name is empty and is given a last name #####
    >>> say_my_name("Daniel", "")
    My name is Daniel 

    ##### Check when first name is into a list #####
    >>> say_my_name(["Daniel"], "Cortes")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### Check when last name is into a list #####
    >>> say_my_name("Daniel", ["Cortes"])
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    ##### check when is passed first and last name inside a tuple #####
    >>> say_my_name(("Daniel", "Cortes"))
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### check when is passed as a dictionary #####
    >>> say_my_name({"first_name" : "Daniel", "last_name" : "Cortes"})
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### check when there is not arguments #####
    >>> say_my_name()
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

    ##### check when is passed a None as argument #####
    >>> say_my_name(None)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### check when is passed a first name and a None #####
    >>> say_my_name("Daniel", None)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    ##### check when is passed a None and a last_name #####
    >>> say_my_name(None, "Cortes")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### check when is passed a boolean data type #####
    >>> say_my_name(True, "Cortes")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    ##### check when is passed a boolean data type #####
    >>> say_my_name("Daniel", False)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    ##### check when is passed a new line #####
    >>> say_my_name("\nDaniel", "Cortes")
    My name is 
    Daniel Cortes

    ##### check when has space in the string #####
    >>> say_my_name("       Daniel     ", "     Cortes    ")
    My name is        Daniel           Cortes    
