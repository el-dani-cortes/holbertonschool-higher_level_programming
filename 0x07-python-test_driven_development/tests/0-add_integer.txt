The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an test text file. These are the possible test cases:

    ##### Importing the function from the module #####
    >>> add_integer = __import__('0-add_integer').add_integer

    ##### Check that the file is executable #####
    >>> import os
    >>> os.access('0-add_integer.py', os.X_OK)
    True

    ##### Check that the README file exists #####
    >>> cwd = os.getcwd()
    >>> check_readme = cwd + '/README.md'
    >>> os.path.exists(check_readme)
    True

    ##### Check for the documentation of the module #####
    >>> len(__import__("0-add_integer").__doc__) > 10
    True

    ##### Check for the documentation of the function #####
    >>> len(__import__("0-add_integer").add_integer.__doc__) > 10
    True

    ##### Check for pep8 style #####
    >>> os.popen("pep8 0-add_integer.py").read()
    ''

    ##### Check for a newline at the end of the file #####
    >>> os.popen("cat -e 0-add_integer.py | tail -1").read()[-1]
    '\n'

    ##### Check for the file has a shebang #####
    >>> os.popen("cat 0-add_integer.py | head -1").read()
    '#!/usr/bin/python3\n'

    ##### Check for two positive integers #####
    >>> add_integer(10, 40)
    50

    ##### Check for two negative integers #####
    >>> add_integer(-10, -40)
    -50

    ##### Ckeck for 'a' as negative and 'b' as positive #####
    >>> add_integer(-1, 8)
    7

    ##### Ckeck for 'a' as positive and 'b' as negative #####
    >>> add_integer(1, -8)
    -7

    ##### check for two positives float #####
    >>> add_integer(2.5, 3.5)
    5

    ##### check for 'a' as positve float and 'b' as positive integer #####
    >>> add_integer(2.5, 3)
    5

    ##### check for 'a' as positive integer and 'b' as positive float #####
    >>> add_integer(2, 3.5)
    5

    ##### check for two negative floats number #####
    >>> add_integer(-2.5, -3.5)
    -5

    ##### check for 'a' as negative integer and 'b' as positive float #####
    >>> add_integer(-2, 3.5)
    1

    ##### check for 'a' as positive integer and 'b' as negative float #####
    >>> add_integer(2, -3.5)
    -1

    ##### check for 'a' as positive float and 'b' as negative integer #####
    >>> add_integer(2.5, -1)
    1

    ##### check for 'a' as negative integer and 'b' as positive float #####
    >>> add_integer(-2, 3.5)
    1

    ##### check for 'a' as positive integer and 'b' as negative float #####
    >>> add_integer(2, -3.5)
    -1

    ##### Check when is only one integer argument #####
    >>> add_integer(2)
    100

    ##### Check is the one argument is a int or float #####
    >>> add_integer("hello")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### Check is 'a' is a int or float data type #####
    >>> add_integer([1], 4)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### Check is 'b' is a int or float data type #####
    >>> add_integer(1, "holberton")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    ##### Check is the argument is equal None #####
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### Check for an empty argument #####
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    ##### Check is 'b' is a big number #####
    >>> add_integer(1, 100e+1000)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    ##### Check is 'a' is a big number #####
    >>> add_integer(100e+1000, 3)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    ##### Check is the two are big numbers #####
    >>> add_integer(1, 100e+1000)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    ##### Check is 'b' is a imaginary number #####
    >>> add_integer(1, 1 + 2j)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    ##### Check is 'a' is a imaginary number #####
    >>> add_integer(1 + 2j, 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### check is 'a' is not a int or a float #####
    >>> add_integer({"a": 1}, 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### check is 'b' is not a int or a float #####
    >>> add_integer(3, {"b": 4 })
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    ##### check when arguments are passed as dictionary #####
    >>> add_integer({"a" : 2}, {"b" : 3})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### Check when pass more than 2 arguments #####
    >>> add_integer(1, 3, 5)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    ##### Check when there is a nan as a argument #####
    >>> add_integer(4, (100e+1000 / 100e+1000))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

    ##### Check when 'a' argument is a Boolean type #####
    >>> add_integer(True, 30)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    ##### Check when 'b' argument is a Boolean type #####
    >>> add_integer(5, False)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    ##### Check when 'a' and 'b' are diferent types #####
    >>> add_integer([20], {'b' : 12})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
